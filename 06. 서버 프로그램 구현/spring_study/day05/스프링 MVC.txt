스프링 MVC 
1. 메시지
MessageSource
  - 빈의 이름 messageSource
  - properties

    properties 파일
    키=값
    키=값

    # 주석


2. 커맨드 객체 검증

인테페이스가 이미 정해져 있다.
-Validator 인터페이스
-Errors : 요청 메서드에 주입
    rejectValue("필드명", 에러코드) : 특정 필드에 한정한 오류
    rejectValue("필드명", 에러코드, 기본메세지)

    reject(에러코드) : 커멘드 객체 자체의 오류(공통)
    reject(에러코드)

    hasErrors() -> 한개라도 reject, rejectValue를 호출하면 true

    #fields
      .errors


-ValidationUtils
  .rejectIfEmpty    //null. isEmpty()
  .rejectIfEmptyOrWhitespace    //null(isEmpty()) + 


lombok
@RequiredArgsConstructor
  - 멤어 변수중에서 final이 있고 초기 값이 없는 경우
  - @NonNull


오류메세지 코드
오류코드
오류코드.필드명
오류코드.커맨드객체.필드명
오류코드.자료형의 클래스명(패키지명)


필수항목 검증 ★★★
  Bean Validation API -> java ee8 : 검증 API 
  hibernate validator 6.0버전

spring jdbc
tomcat jdbc
ojdbc8
slf4j-api
logback-classic




암호화
-양방향 암호화 : 암호화 - 복호화(원 데이터로 복구)
		AES256, ARIA, OpenSSL ...

		주소, 전화번호, 쿠키

-단반향 암호화 : 해시(복호화 x)

		비밀번호 - 비밀번호의 일치 여부 확인, 실제 비밀번호는 알 필요x
		해시
		  - 고정값 해시 : 같은 값에 대해서 같은 해시코드
		    md5, sha1, sha256, sha512 ...
		  - 유동 해시 : 해시를 만들때 마다 다른 해시코드
		    BCrypt
		





3. 세션
참고)
스프링 관리 객체
HttpServlerResponse
HttpServletRequest
HttpSession

-의존성 자동주입
- 요청 메서드에 자동 주입



session









4. 인터셉터
- HandlerInterceptor 인터페이스
  - boolean preHandle(...)
    - 컨트롤러 빈 요청 메서드를 실행하기 전
    - true : 컨트롤러 처리
    - false : 중단
    - 접근 권한 통제에서 주로 사용


  - void postHandle(...)
    - 컨트롤러 빈 요청 메서드 처리 후 ModelAndView 반환 한 직후 실행

  - void afterCompletion(...)
    - 응답 완료 후 실행된다.



- WebMvcConfigurer
  - addInterceptors : 설정
 
5. 쿠키

@CookieValue
기본동작 : 변수명과 동일한 쿠키명이 있으면 자동 주입




6. 날짜 값 변환
- java.time 패키지
    LocalDate, LocalDateTime

  요청데이터가 String : LocalDate, LocalTime, LocalDateTime으로 자동 변환 x
  @DateTimeFormat
    - pattern : 

    - 형식이 일치하지 않을때 typeMismatch



7. @PathVariable : 경로 변수
/member/회원아이디


8. 예외처리
@ExceptionHandler(발생할 예외 클래스 클래스(Class))

- 예외처리 메서드 자동 주입
  - 발생항 예외 객체
  - HttpServletRequest
  - HttpServlerResponse
  - HttpSession
  - Model model

@ControllerAdvice : 컨트롤러 공통

@RestControllerAdvice








7. 파일 업로드
설정
MultipartFile 인터페이스

1024바이트 -1kb
1024kb -> 1mb


기본 POST 양식 데이터 형식(Content-Type)
content-type : application/x-www-form-urlencoded
userId=user01&userPw=123456


바이너리 데이터

0000123123123123123



파일 전송 : multipart : 여러 파트 : 양식데이터와 파일데이터의 양식이 일치하지 않으므로 파트를 나눠서 전송하기 위함

요청 바디
------------------양식 데이터 파드 ---------------------
userId=user01&userPw=123456

-------------------파일 데이터 파드 ---------------------
파일 데이터


<form method="post" ... enctype="multipart/form-data">


파일 업로드 디렉토리를 정적 경로로 연결해야 한다.














8. 프로필
- 프로필 변수에 따라 생성하는 스프링 빈을 선택
@Profile("환경변수")

spring.profiles.active=환경변수


예)
실행시 - Dspring.profiles.active=prod
@Profile("prod")



9. 프로퍼티
properties 파일의 값


static, @Bean
ProperySourcesPlaceholderConfigurer


@Value("${키}")


java -jar  배포파일.jar -Dspring.profiles.active=prod

application.properties
application.prod.properties


프로필 + 프로퍼티 : 주로 설정시에 사용




