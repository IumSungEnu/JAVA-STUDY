Spring Data JPA
1. JAP 동작방식
spring data jpa - starter

ddl-auto
  create : 모든 테이블을 삭제(DROP)하고 다시 생성 -> 개발 초기
  update : 테이블을 삭제하지 않고 변경된 항목만 테이블에 추가, 변경 -> 개발 중기
  validate : 테이블의 차이점을 검증, 생성, 변경x -> 테스트, 배포시
  none : 아무것도 하지 않는다. -> 배포 서버


JPA(Java Persistence API) - 상태변환
자바 영속성 API
구현체 : Hibernate Entity Manager

Persistence(영속성) : 엔티티의 상태 변화 감지 메모리

EntityManagerFactory : EntityManager를 생성
EntityManager : 영속성 관리자


영속성에 엔티티의 상태 감지 -> 쿼리 실행

EntityManager : 영속성 관리 메서드
  persist(엔티티) : 엔티티를 영속 상태로 만드는 메서드
		(상태 감지)
  flush() : 영속성의 상태 변경 상태 -> DB에 반영
  remove() : 영속성의 제거 상태 변경(영속성 분리가 아니라 제거상태)
	-> flush()가 되면 DELETE 쿼리가 실행된다.
  find() : 조회
	-> 영속 상태가 아니면 DB에서 조회 -> 영속상태 -> 조회
	-> 영속 상태일 경우 -> 조회(캐시의 이점)
  detach : 영속 상태 분리
	- 상태변화를 감지하지 않는다.
  merge : 영속 상태 분리된 엔티티를 다시 영속상태로 만드는 것
	- 상대변화를 감지한다.


데이터 추가, 수정, 삭제 : O
조회 - 사용시 제한이 있다.

JPQL - Java Persistence Query Language


2. Entity 설계하기

3. Repository 설계하기
  JpaRepository 인터페이스 상속 -> 구현체를 Proxy 형태로 자동 생성

  엔티티 save(엔티티)
  .... savaAndFlush(...)
  saveAll
  saveAllAndFlush(...)

  findAll
  findOne

  count() : 전체 갯수
  delete(엔티티) : 영속성 제거
  flush()




4. 쿼리 메서드

5. @Query 애노테이션

6. Querydsl

7. 연관관계 매핑

8. 영속성 전이

9. 지연로딩

10. Auditing을 이용한 공통 속성화

