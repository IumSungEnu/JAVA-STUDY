아마존 웹사이트 - 1년 공짜.


application.properties 설명

port  
  - 80 : http
  - 443 : https



spring.jpa.hibernate.ddl-auto
  - create : 서버 시작시에 모든 엔티티의 테이블 DROP -> 다시 생성 - 개발 초기
  - update : 서버 시작시에 테이블 DROP X -> 변경 사항만 반영 - 개발 중기

  - validate : 엔티티와 테이블간의 차이를 체크 : 차이 있으면 예외발생, 변경 x - 테스트서버, 실서버
  - none : 아무것도 x - 실서버


JAP (Java Persistence API) : 자바 영속성 API

API (Application Programming Interface)

Hibernate Entity Manager



영속성(Persistence) : 엔티티의 상태 변화 감지 메모리 영역

EntityManagerFactory : 엔티티매니저를 생성
  -> EntityManager : 엔티티의 영속 상태 관리
       - persist(엔티티) - 영속성에 추가(영속성 관리 상태)
       - flush() : DB에 반영

      - persiste(엔티티) - 영속성 컨텍스트 추가(상태관리)
		     - 없는 엔티티 -> insert
		     - 잇는 엔티티 -> update
      - remove(엔티티)  - 영속성을 제거 상태로 변경
		     - flush시에 delete 쿼리 실행
      - detach(엔티티)   - 영속성 상태 분리(상태 관리x)
  		     - 변경해도 DB 반영 x
      - merge(엔티티) - 영속성 상태 분리 엔티티 -> 영속상태(상태관리)

      - find(엔티티, 클래스, 기본키) - 조회
			       - 조회하는 엔티티가 이미 영속 상태에 있으면 그걸 가져오고
                                           - 없으면 DB에서 select 쿼리 실행 ->  조회된 데이터 -> 영속상태
			       - flush() 먼저 수행되고 쿼리, 엔티티 조회


        ==> 다양한 조회 쿼리를 수행하기에는 한계가 있다.
        ==> 그래서 JPQL(Java Persistence Query Language)
                    - 엔티티로 조회 쿼리 작성
	        - 영속 상태


Spring Data JPA
(CrudRepository)
JpaRepository Interface -> DAO 클래스를 대신

- 쿼리 수행을 할 수 있는 구현체를 대신 다 생성





